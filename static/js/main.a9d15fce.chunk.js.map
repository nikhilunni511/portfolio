{"version":3,"sources":["components/folders/dragAbout.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["DragAbout","state","activeDrags","deltaPosition","x","y","controlledPosition","handleDrag","e","ui","setState","deltaX","deltaY","onStart","onStop","adjustXPos","preventDefault","stopPropagation","adjustYPos","onControlledDrag","position","onControlledDragStop","dragHandlers","this","bounds","className","style","fontSize","color","props","folderName","React","Component","makeDiv","map","item","index","key","Desktop","spanArea","currentTarget","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4SAIqBA,G,kNACnBC,MAAQ,CACNC,YAAa,EACbC,cAAe,CACbC,EAAG,EAAGC,EAAG,GAEXC,mBAAoB,CAClBF,GAAI,IAAKC,EAAG,M,EAIhBE,WAAa,SAACC,EAAGC,GAAQ,IAAD,EACL,EAAKR,MAAME,cAApBC,EADc,EACdA,EAAGC,EADW,EACXA,EACX,EAAKK,SAAS,CACZP,cAAe,CACbC,EAAGA,EAAIK,EAAGE,OACVN,EAAGA,EAAII,EAAGG,W,EAKhBC,QAAU,WACR,EAAKH,SAAS,CAAER,cAAe,EAAKD,MAAMC,e,EAG5CY,OAAS,WACP,EAAKJ,SAAS,CAAER,cAAe,EAAKD,MAAMC,e,EAI5Ca,WAAa,SAACP,GACZA,EAAEQ,iBACFR,EAAES,kBAFgB,MAGD,EAAKhB,MAAMK,mBAApBF,EAHU,EAGVA,EAAGC,EAHO,EAGPA,EACX,EAAKK,SAAS,CAAEJ,mBAAoB,CAAEF,EAAGA,EAAI,GAAIC,Q,EAGnDa,WAAa,SAACV,GACZA,EAAEQ,iBACFR,EAAES,kBAFgB,IAGVX,EAAuB,EAAKL,MAA5BK,mBACAF,EAASE,EAATF,EAAGC,EAAMC,EAAND,EACX,EAAKK,SAAS,CAAEJ,mBAAoB,CAAEF,IAAGC,EAAGA,EAAI,O,EAGlDc,iBAAmB,SAACX,EAAGY,GAAc,IAC3BhB,EAASgB,EAAThB,EAAGC,EAAMe,EAANf,EACX,EAAKK,SAAS,CAAEJ,mBAAoB,CAAEF,IAAGC,Q,EAG3CgB,qBAAuB,SAACb,EAAGY,GACzB,EAAKD,iBAAiBX,EAAGY,GACzB,EAAKN,U,uDAIL,IAAMQ,EAAe,CAAET,QAASU,KAAKV,QAASC,OAAQS,KAAKT,QAE3D,OACE,kBAAC,IAAD,eAAWU,OAAO,UAAaF,GAC7B,yBAAKG,UAAU,UACb,uBAAGA,UAAU,iBAAiBC,MAAO,CAAEC,SAAU,OAAQC,MAAO,YAAhE,UACA,0BAAMH,UAAU,cAAcF,KAAKM,MAAMC,kB,GA9DZC,IAAMC,YCDvCC,EADM,CAAC,iBAAkB,SAAU,iBAAkB,aAAc,WAAY,YAAa,WAC9EC,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAWC,IAAKD,EAAON,WAAYK,OAE/DG,EAAb,4MACErC,MAAQ,CACNyB,MAAO,WAFX,EAKEa,SAAW,SAAC/B,GACwB,iBAA9BA,EAAEgC,cAAcf,WAClB,EAAKf,SAAS,CAAEgB,MAAO,kBAP7B,uDAWI,OACE,yBAAKD,UAAWF,KAAKtB,MAAMyB,MAAOe,QAASlB,KAAKgB,UAE7CN,OAdT,GAA6BD,aCOdU,EARH,WACV,OACE,yBAAKjB,UAAU,OACd,kBAAC,EAAD,QCKekB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a9d15fce.chunk.js","sourcesContent":["import React from 'react';\nimport Draggable from 'react-draggable';\nimport './folder.scss'\n\nexport default class DragAbout extends React.Component {\n  state = {\n    activeDrags: 0,\n    deltaPosition: {\n      x: 0, y: 0\n    },\n    controlledPosition: {\n      x: -400, y: 200\n    }\n  };\n\n  handleDrag = (e, ui) => {\n    const { x, y } = this.state.deltaPosition;\n    this.setState({\n      deltaPosition: {\n        x: x + ui.deltaX,\n        y: y + ui.deltaY,\n      }\n    });\n  };\n\n  onStart = () => {\n    this.setState({ activeDrags: ++this.state.activeDrags });\n  };\n\n  onStop = () => {\n    this.setState({ activeDrags: --this.state.activeDrags });\n  };\n\n  // For controlled component\n  adjustXPos = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { x, y } = this.state.controlledPosition;\n    this.setState({ controlledPosition: { x: x - 10, y } });\n  };\n\n  adjustYPos = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { controlledPosition } = this.state;\n    const { x, y } = controlledPosition;\n    this.setState({ controlledPosition: { x, y: y - 10 } });\n  };\n\n  onControlledDrag = (e, position) => {\n    const { x, y } = position;\n    this.setState({ controlledPosition: { x, y } });\n  };\n\n  onControlledDragStop = (e, position) => {\n    this.onControlledDrag(e, position);\n    this.onStop();\n  };\n\n  render() {\n    const dragHandlers = { onStart: this.onStart, onStop: this.onStop };\n    // const { deltaPosition, controlledPosition } = this.state;\n    return (\n      <Draggable bounds=\"parent\" {...dragHandlers}>\n        <div className='folder'>\n          <i className=\"material-icons\" style={{ fontSize: \"48px\", color: \"#F8D775\" }}>folder</i>\n          <span className=\"folderName\">{this.props.folderName}</span>\n        </div>\n      </Draggable>\n    //   <Draggable bounds=\"parent\" {...dragHandlers}>\n    //   <div className=\"box\">\n    //     I can only be moved within my offsetParent.<br /><br />\n    //     Both parent padding and child margin work properly.\n    //   </div>\n    // </Draggable>\n    );\n  }\n}\n","import React, { Component } from 'react'\nimport DragAbout from './folders/dragAbout'\nconst arr = [\"Career Summary\", \"Skills\", \"Certifications\", \"Experience\", \"Projects\", \"Education\", \"Contact\"]\nconst makeDiv = arr.map((item, index) => <DragAbout key={index} folderName={item} />)\n\nexport class Desktop extends Component {\n  state = {\n    style: 'desktop'\n  }\n\n  spanArea = (e) => {\n    if (e.currentTarget.className !== 'desktop-span')\n      this.setState({ style: \"desktop-span\" })\n  }\n\n  render() {\n    return (\n      <div className={this.state.style} onClick={this.spanArea}>\n        {/* <About/> */}\n        {makeDiv}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './App.css';\nimport { Desktop } from './components/main';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n     <Desktop/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}